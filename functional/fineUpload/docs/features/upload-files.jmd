{% extends "_templates/base.html" %}
{% set page_title = "Upload Files" %}
{% block content %}
{% markdown %}

# Uploading Files {: .page-header }

Assuming you already have a copy of Fine Uploader, first and foremost, you are
going to want to make sure you've read the [Getting Started guide](../quickstart/01-getting-started.html).

If you feel comfortable from there, we can begin explaining how Fine Uploader
uploads files, as well as some of the basic options one can set to customize
their uploads.

{{ alert(
"""Before you delve any further, note that this section assumes you have a
(working!) server to handle uploads. If not, then make sure to check out
the server-side guidelines for either [traditional](../endpoint_handlers/traditional.html) or [Amazon S3](../endpoint_handlers/amazon-s3.html) upload
endpoints.""", "warn") }}

## Events

{{ events_table(
    (
        ("submit", "`Integer` id, `String` name", "Called whenever an item has been submitted to the uploader is now a candidate for uploading."),
        ("submitted", "`Integer` id, `String` name", "Called whenever an item has been accepted by the uploader.
        This occurs after all validation checks have passed.  When using Fine Uploader UI mode, this also occurs
        AFTER the associated file item has been adde to the DOM."),
        ("complete", "`Integer` id, `String` name, `Object` reponseJSON, `XMLHttpRequest` or `XDomainRequest` xhrOrXdr", "Called whenever attempt to
        upload an item have completed.  The `success` property on `responseJSON` will allow you to determine
        if the attempt was successful or not."),
        ("upload", "`Integer` id, `String` name", "Called just _before_ an upload begins on an item."),
    )
) }}

## Methods

{{ methods_table(
    (
        ("addFiles", "filesOrInputs[, params[, endpoint]]", "", "Submit one or more `File` objects to the uploader"),
        ("addBlobs", "blobDataArray[, params[, endpoint]]", "", "Submit `Blob` or `BlobData` objects to the uploader"),
        ("uploadStoredFiles", "", "", "Begin uploading all queued items. `NoFilesError` if there are no items to upload."),
    )
) }}

{{
alert("`addFiles` accepts `File`s, `input` elements, or a collection of any of these types
 provdided the collection object contains an (integer) index property for each contained item.")
}}

### `BlobData` objects

`BlobData` objects are just `Blobs` with names. Their properties:

```javascript
var blobData = {
    name: /* Blob name goes here */
    blob: /* Blob goes here */
}
```

### Successfully Uploading

Upload success will occur when the server's response status is 200 and the
request body is a JSON string `{ "success": "true" }`

### Auto/Manual Uploading

Fine Uploader can automatically upload files that are added to it, or wait until
the user triggers an action to upload. Automatic uploads are turned on or off
via the `autoUpload` property of the main options object.

By default `autoUpload` is enabled.

```javascript
// Upload automatically
$("#fine-uploader").fineUploader({
    request: {
        endpoint: '/server/upload'
    }
});
```

If `autoUpload` is set to `false`, then items added to Fine Uploader will be queued until you explicitly trigger
the uploads via the API time. Uploads can be triggered by calling the `uploadStoredFiles` method on an instance of Fine Uploader.

<!-- http://stackoverflow.com/questions/16471503/fineuploader-uploads-the-same-file-multiple-times-at-the-same-time -->
```javascript
// Manually upload
$("#fine-uploader").fineUploader({
    autoUpload: false,
    request: {
        endpoint: '/server/upload'
    }
});

$("#upload-button").on('click', function () {
    $("#fine-uploader").fineUploader('uploadStoredFiles');
});
```

{% endmarkdown %}
{% endblock %}
