{% extends "_templates/base.html" %}
{% set page_title = "Validation" %}
{% block content %}
{% markdown %}

# Validation {: .page-header }

Fine Uploader's validation abilities allow integrators to strictly define
what sorts of files can and can not be uploaded.

### `validation` option

{{ options_table(
    (
        ("acceptFiles", "comma-separated Strings", "`null`", "Used by the file selection dialog. Restrict the valid file types that appear in the selection dialog by listing valid content-type specifiers here. See docs on the [accept attribute of the `<input>` element](https://developer.mozilla.org/en-USHTML/Element/Input)"),
        ("allowedExtensions", "Array of Strings", "`[]`", "Specify file valid file extensions here to restrict uploads to specific types."),
        ("itemLimit", "`Number`", "`0`", "Maximum number of items that can be potentially uploaded in this session. Will reject all items that are added or retried after this limit is reached."),
        ("minSizeLimit", "`Number`", "`0`", "The minimum allowable size, in bytes, for an item."),
        ("sizeLimit", "`Number`", "`0`", "The maximum allowable size, in bytes, for an item."),
        ("stopOnFirstInvalidFile", "`Boolean`", "`true`", "When `true` the first invalid item will stop processing further files.")
    )
) }}

## Events
{{ events_table(
    (
        ("validate", "`File` or `BlobData` fileOrBlobData", "Called once for each selection, dropped, or `addFiles`
        submitted file and for each `addBlobs` submitted `Blob`. You may return false to prevent the file from being
        submitted.  You may also return a [`qq.Promise`](async-tasks-and-promises.html)." ),
        ("validateBatch", "`Array` fileOrBlobDataArray", "Called once for each batch of selected, dropped or `addFiles`
        submitted files and for each `addBlobs` submitted `Blob`s. You may return false to prevent all files in the
        batch from being submitted.  You may also return a [`qq.Promise`](async-tasks-and-promises.html)."),
    )
) }}

The `validate` and `validateBatch` events are thrown/called before the default
Fine Uploader validators (defined in the options) execute.

If the `validation.stopOnFirstInvalidFile` option is enabled, then neither of
these events will be thrown preceding a file being invalid (i.e., one of these
callbacks returned `false`).

Also note that a `BlobData` object has two properties:

```javascript
{
    name: "", /* The name of the file or blob */
    size: "", /* the size of the file or blob */
}
```

## Validation on Name

Until Fine Uploader is able to detect file mimetype client-side, validation
on name is the best way to ensure that only the correct sorts of files get
uploaded to your server.

Validation on name can be controlled by modifying the `validation` settings,
as documented above. The most important options are: `allowedExtensions` and
`acceptFiles`.

## Validation on Size

Size validation is available in File API browsers only. Size can be restricted
via the `sizeLimit` or `minSizeLimit` options in the `validation` settings.

## Validation on Type

Definitive validation on file type is not *yet* possible in Fine Uploader. However,
client-side file identification is in the works for future releases.


{% endmarkdown %}
{% endblock %}
